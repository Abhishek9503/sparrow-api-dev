import { ApiProperty } from "@nestjs/swagger";
import { IsNotEmpty, IsOptional, IsString } from "class-validator";

/**
 * Data Transfer Object for AI response.
 */
export class AIResponseDto {
  /**
   * The result generated by the AI.
   * @example ["hii"]
   */
  @IsNotEmpty()
  @ApiProperty({
    required: true,
    example: ["hii"],
  })
  result: string;

  /**
   * The thread ID associated with the response.
   * @example "thread_34789"
   */
  @ApiProperty({
    required: true,
    example: "thread_34789",
  })
  @IsNotEmpty()
  threadId: string;

  /**
   * The message ID associated with the response.
   * @example "msg_34789"
   */
  @ApiProperty({
    required: true,
    example: "msg_34789",
  })
  @IsNotEmpty()
  messageId: string;
}

/**
 * Data Transfer Object for generating AI response.
 */
export class PromptPayload {
  /**
   * The prompt or command.
   */
  @IsString()
  @ApiProperty({ required: true, example: "prompt" })
  @IsNotEmpty()
  text: string;

  /**
   * The thread ID associated with the prompt.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "thread id" })
  threadId: string;

  /**
   * Additional instructions for the assistant which will
   * decide the context for a particular thread.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "instructions to your assistant" })
  instructions: string;
}

/**
 * Data Transfer Object for generating AI response.
 */
export class StreamPromptPayload {
  /**
   * The prompt or command.
   */
  @IsString()
  @ApiProperty({ required: true, example: "prompt" })
  @IsNotEmpty()
  text: string;

  /**
   * The thread ID associated with the prompt.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "thread id" })
  threadId: string;

  /**
   * The tab id where that thread belongs.
   */
  @IsString()
  @IsNotEmpty()
  @ApiProperty({ required: true, example: "tab id" })
  tabId: string;

  /**
   * Additional instructions for the assistant which will
   * decide the context for a particular thread.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "instructions to your assistant" })
  instructions: string;
}

export class ChatBotPayload {
  /**
   * The prompt or command.
   */
  @IsString()
  @ApiProperty({ required: true, example: "user input" })
  @IsOptional()
  userInput?: string;

  /**
   * The thread ID associated with the prompt.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "thread id" })
  threadId?: string;

  /**
   * The tab id where that thread belongs.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "tab id" })
  tabId?: string;

  /**
   * The email id to check the limit.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "emailId" })
  emailId?: string;

  /**
   * The Api data.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "Api Data" })
  apiData?: string;

  /**
   * Conversation.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: '[{"role": "user", "content": "Hello!"}, {"role": "assistant", "content": "Hi there! How can I help you?"}]' })
  conversation?: string;

  /**
   * User Activity.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "user activity" })
  activity?: string;

  /**
   * The model name to be used for the prompt.
   */
  @IsString()
  @ApiProperty({ required: true, example: "OpenAI or Anthropic" })
  @IsOptional()
  model?: string;

  /**
   * The model version.
   */
  @IsString()
  @ApiProperty({ required: true, example: "gpt-4o or deepseek v3" })
  @IsOptional()
  modelVersion?: string;

  /**
   * Auth key.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "Auth Token" })
  authKey?: string;

  /**
   * The System prompt to be used for the model.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: true, example: "System Prompt" })
  systemPrompt?: string;

  /**
   * Stream Response.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "true or false" })
  streamResponse?: boolean;

  /**
   * JSON Response Format.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "true or false" })
  jsonResponseFormat?: boolean;

  /**
   * Temperature.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "0.0 to 1.0" })
  temperature?: number;

  /**
   * Presence Penalty.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "0.0 to 1.0" })
  presencePenalty?: number;

  /**
   * Frequence Penalty.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "0.0 to 1.0" })
  frequencePenalty?: number;

  /**
   * Max Tokens.
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "-1 to 4096" })
  maxTokens?: number;

  /**
   * Feature selected
   */
  @IsString()
  @IsOptional()
  @ApiProperty({ required: false, example: "sparrow-ai OR llm-evaluation" })
  feature?: string;
}

export class ErrorResponsePayload {
  /**
   * The cURL.
   */
  @IsString()
  @ApiProperty({ required: true, example: "curl -X" })
  @IsNotEmpty()
  curl: string;

  /**
   * The error.
   */
  @IsString()
  @ApiProperty({ required: true, example: "error" })
  @IsNotEmpty()
  error: string;
}
